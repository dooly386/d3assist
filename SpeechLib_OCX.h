// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 2017-07-18 오전 8:40:25 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\System32\Speech\Common\sapi.dll (1)
// LIBID: {C866CA3A-32F7-11D2-9602-00C04F8EE628}
// LCID: 0
// Helpfile: 
// HelpString: Microsoft Speech Object Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   SpeechLib_OCXH
#define   SpeechLib_OCXH

#pragma option push -b -a4 -w-inl -w-8118

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <System.Win.StdVCL.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "SpeechLib_TLB.h"
namespace Speechlib_tlb
{

// *********************************************************************//
// HelpString: Microsoft Speech Object Library
// Version:    5.4
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpNotifyTranslator
// Help String      : SpNotify
// Default Interface: ISpNotifyTranslator
// Def. Intf. Object: ISpNotifyTranslatorPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpNotifyTranslator : public Vcl::Oleserver::TOleServer
{
  ISpNotifyTranslatorPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpNotifyTranslator(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpNotifyTranslatorPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpNotifyTranslatorPtr intf);


  void            __fastcall Notify(void);
  void            __fastcall InitWindowMessage(Speechlib_tlb::wireHWND hWnd/*[in]*/, 
                                               unsigned Msg/*[in]*/, 
                                               Speechlib_tlb::UINT_PTR wParam/*[in]*/, 
                                               Speechlib_tlb::LONG_PTR lParam/*[in]*/);
  void            __fastcall InitCallback(void** pfnCallback/*[in]*/, 
                                          Speechlib_tlb::UINT_PTR wParam/*[in]*/, 
                                          Speechlib_tlb::LONG_PTR lParam/*[in]*/);
  void            __fastcall InitSpNotifyCallback(void** pSpCallback/*[in]*/, 
                                                  Speechlib_tlb::UINT_PTR wParam/*[in]*/, 
                                                  Speechlib_tlb::LONG_PTR lParam/*[in]*/);
  void            __fastcall InitWin32Event(void* hEvent/*[in]*/, long fCloseHandleOnRelease/*[in]*/);
  void            __fastcall Wait(unsigned_long dwMilliseconds/*[in]*/);
  void*           __fastcall GetEventHandle(void);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpObjectTokenCategory
// Help String      : SpObjectTokenCategory Class
// Default Interface: ISpeechObjectTokenCategory
// Def. Intf. Object: ISpeechObjectTokenCategoryPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpObjectTokenCategory : public Vcl::Oleserver::TOleServer
{
  ISpeechObjectTokenCategoryPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpObjectTokenCategory(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechObjectTokenCategoryPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechObjectTokenCategoryPtr intf);


  BSTR            __fastcall get_Id(void);
  void            __fastcall set_Default(BSTR TokenId/*[in]*/);
  BSTR            __fastcall get_Default(void);
  void            __fastcall SetId(BSTR Id/*[in]*/, VARIANT_BOOL CreateIfNotExist/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechDataKey* __fastcall GetDataKey(Speechlib_tlb::SpeechDataKeyLocation Location/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall EnumerateTokens(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                                 BSTR OptionalAttributes/*[in,def,opt]*/);
  __property BSTR Id={ read=get_Id };
  __property BSTR Default={ read=get_Default, write=set_Default, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpObjectToken
// Help String      : SpObjectToken Class
// Default Interface: ISpeechObjectToken
// Def. Intf. Object: ISpeechObjectTokenPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpObjectToken : public Vcl::Oleserver::TOleServer
{
  ISpeechObjectTokenPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpObjectToken(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechObjectTokenPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechObjectTokenPtr intf);


  BSTR            __fastcall get_Id(void);
  Speechlib_tlb::ISpeechDataKeyPtr __fastcall get_DataKey(void);
  Speechlib_tlb::ISpeechObjectTokenCategoryPtr __fastcall get_Category(void);
  BSTR            __fastcall GetDescription(long Locale/*[in,def,opt]*/);
  void            __fastcall SetId(BSTR Id/*[in]*/, BSTR CategoryID/*[in,def,opt]*/, 
                                   VARIANT_BOOL CreateIfNotExist/*[in,def,opt]*/);
  BSTR            __fastcall GetAttribute(BSTR AttributeName/*[in]*/);
  LPUNKNOWN       __fastcall CreateInstance(LPUNKNOWN pUnkOuter/*[in,def,opt]*/, 
                                            Speechlib_tlb::SpeechTokenContext ClsContext/*[in,def,opt]*/);
  void            __fastcall Remove(BSTR ObjectStorageCLSID/*[in]*/);
  BSTR            __fastcall GetStorageFileName(BSTR ObjectStorageCLSID/*[in]*/, 
                                                BSTR KeyName/*[in]*/, BSTR FileName/*[in]*/, 
                                                Speechlib_tlb::SpeechTokenShellFolder Folder/*[in]*/);
  void            __fastcall RemoveStorageFileName(BSTR ObjectStorageCLSID/*[in]*/, 
                                                   BSTR KeyName/*[in]*/, 
                                                   VARIANT_BOOL DeleteFile/*[in]*/);
  VARIANT_BOOL    __fastcall IsUISupported(BSTR TypeOfUI/*[in]*/, VARIANT* ExtraData/*[in,def,opt]*/, 
                                           LPUNKNOWN Object/*[in,def,opt]*/);
  void            __fastcall DisplayUI(long hWnd/*[in]*/, BSTR Title/*[in]*/, BSTR TypeOfUI/*[in]*/, 
                                       VARIANT* ExtraData/*[in,def,opt]*/, 
                                       LPUNKNOWN Object/*[in,def,opt]*/);
  VARIANT_BOOL    __fastcall MatchesAttributes(BSTR Attributes/*[in]*/);
  __property BSTR Id={ read=get_Id };
  __property Speechlib_tlb::ISpeechDataKeyPtr DataKey={ read=get_DataKey };
  __property Speechlib_tlb::ISpeechObjectTokenCategoryPtr Category={ read=get_Category };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpResourceManager
// Help String      : SpResourceManger
// Default Interface: ISpResourceManager
// Def. Intf. Object: ISpResourceManagerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpResourceManager : public Vcl::Oleserver::TOleServer
{
  ISpResourceManagerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpResourceManager(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpResourceManagerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpResourceManagerPtr intf);


  void            __fastcall RemoteQueryService(System::TGUID* guidService/*[in]*/, 
                                                System::TGUID* riid/*[in]*/, 
                                                LPUNKNOWN* ppvObject/*[out]*/);
  void            __fastcall SetObject(System::TGUID* guidServiceId/*[in]*/, 
                                       LPUNKNOWN punkObject/*[in]*/);
  void            __fastcall GetObject(System::TGUID* guidServiceId/*[in]*/, 
                                       System::TGUID* ObjectCLSID/*[in]*/, 
                                       System::TGUID* ObjectIID/*[in]*/, 
                                       long fReleaseWhenLastExternalRefReleased/*[in]*/, 
                                       void** ppObject/*[out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpStreamFormatConverter
// Help String      : FormatConverter Class
// Default Interface: ISpStreamFormatConverter
// Def. Intf. Object: ISpStreamFormatConverterPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpStreamFormatConverter : public Vcl::Oleserver::TOleServer
{
  ISpStreamFormatConverterPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpStreamFormatConverter(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpStreamFormatConverterPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpStreamFormatConverterPtr intf);


  void            __fastcall RemoteRead(unsigned_char* pv/*[out]*/, unsigned_long cb/*[in]*/, 
                                        unsigned_long* pcbRead/*[out]*/);
  void            __fastcall RemoteWrite(unsigned_char* pv/*[in]*/, unsigned_long cb/*[in]*/, 
                                         unsigned_long* pcbWritten/*[out]*/);
  void            __fastcall RemoteSeek(Speechlib_tlb::_LARGE_INTEGER dlibMove/*[in]*/, 
                                        unsigned_long dwOrigin/*[in]*/, 
                                        Speechlib_tlb::_ULARGE_INTEGER* plibNewPosition/*[out]*/);
  void            __fastcall SetSize(Speechlib_tlb::_ULARGE_INTEGER libNewSize/*[in]*/);
  void            __fastcall RemoteCopyTo(Speechlib_tlb::IStream* pstm/*[in]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER cb/*[in]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER* pcbRead/*[out]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER* pcbWritten/*[out]*/);
  void            __fastcall Commit(unsigned_long grfCommitFlags/*[in]*/);
  void            __fastcall Revert(void);
  void            __fastcall LockRegion(Speechlib_tlb::_ULARGE_INTEGER libOffset/*[in]*/, 
                                        Speechlib_tlb::_ULARGE_INTEGER cb/*[in]*/, 
                                        unsigned_long dwLockType/*[in]*/);
  void            __fastcall UnlockRegion(Speechlib_tlb::_ULARGE_INTEGER libOffset/*[in]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER cb/*[in]*/, 
                                          unsigned_long dwLockType/*[in]*/);
  void            __fastcall Stat(Speechlib_tlb::tagSTATSTG* pstatstg/*[out]*/, 
                                  unsigned_long grfStatFlag/*[in]*/);
  void            __fastcall Clone(Speechlib_tlb::IStream** ppstm/*[out]*/);
  void            __fastcall GetFormat(System::TGUID* pguidFormatId/*[in]*/, 
                                       Speechlib_tlb::WAVEFORMATEX** ppCoMemWaveFormatEx/*[out]*/);
  void            __fastcall SetBaseStream(Speechlib_tlb::ISpStreamFormat* pStream/*[in]*/, 
                                           long fSetFormatToBaseStreamFormat/*[in]*/, 
                                           long fWriteToBaseStream/*[in]*/);
  void            __fastcall GetBaseStream(Speechlib_tlb::ISpStreamFormat** ppStream/*[out]*/);
  void            __fastcall SetFormat(System::TGUID* rguidFormatIdOfConvertedStream/*[in]*/, 
                                       Speechlib_tlb::WAVEFORMATEX* pWaveFormatExOfConvertedStream/*[in]*/);
  void            __fastcall ResetSeekPosition(void);
  void            __fastcall ScaleConvertedToBaseOffset(unsigned_int64 ullOffsetConvertedStream/*[in]*/, 
                                                        unsigned_int64* pullOffsetBaseStream/*[out]*/);
  void            __fastcall ScaleBaseToConvertedOffset(unsigned_int64 ullOffsetBaseStream/*[in]*/, 
                                                        unsigned_int64* pullOffsetConvertedStream/*[out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpMMAudioEnum
// Help String      : SpMMAudioEnum Class
// Default Interface: IEnumSpObjectTokens
// Def. Intf. Object: IEnumSpObjectTokensPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpMMAudioEnum : public Vcl::Oleserver::TOleServer
{
  IEnumSpObjectTokensPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpMMAudioEnum(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  IEnumSpObjectTokensPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IEnumSpObjectTokensPtr intf);


  void            __fastcall Next(unsigned_long celt/*[in]*/, 
                                  Speechlib_tlb::ISpObjectToken** pelt/*[out]*/, 
                                  unsigned_long* pceltFetched/*[out]*/);
  void            __fastcall Skip(unsigned_long celt/*[in]*/);
  void            __fastcall Reset(void);
  void            __fastcall Clone(Speechlib_tlb::IEnumSpObjectTokens** ppEnum/*[out]*/);
  void            __fastcall Item(unsigned_long Index/*[in]*/, 
                                  Speechlib_tlb::ISpObjectToken** ppToken/*[out]*/);
  void            __fastcall GetCount(unsigned_long* pCount/*[out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpMMAudioIn
// Help String      : SpMMAudioIn Class
// Default Interface: ISpeechMMSysAudio
// Def. Intf. Object: ISpeechMMSysAudioPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpMMAudioIn : public Vcl::Oleserver::TOleServer
{
  ISpeechMMSysAudioPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpMMAudioIn(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechMMSysAudioPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechMMSysAudioPtr intf);


  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_Format(void);
  void            __fastcall _set_Format(Speechlib_tlb::ISpeechAudioFormat* AudioFormat/*[in]*/);
  Speechlib_tlb::ISpeechAudioStatusPtr __fastcall get_Status(void);
  Speechlib_tlb::ISpeechAudioBufferInfoPtr __fastcall get_BufferInfo(void);
  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_DefaultFormat(void);
  long            __fastcall get_Volume(void);
  void            __fastcall set_Volume(long Volume/*[in]*/);
  long            __fastcall get_BufferNotifySize(void);
  void            __fastcall set_BufferNotifySize(long BufferNotifySize/*[in]*/);
  long            __fastcall get_EventHandle(void);
  long            __fastcall get_DeviceId(void);
  void            __fastcall set_DeviceId(long DeviceId/*[in]*/);
  long            __fastcall get_LineId(void);
  void            __fastcall set_LineId(long LineId/*[in]*/);
  long            __fastcall get_MMHandle(void);
  long            __fastcall Read(VARIANT* Buffer/*[out]*/, long NumberOfBytes/*[in]*/);
  long            __fastcall Write(VARIANT Buffer/*[in]*/);
  VARIANT         __fastcall Seek(VARIANT Position/*[in]*/, 
                                  Speechlib_tlb::SpeechStreamSeekPositionType Origin/*[in,def,opt]*/);
  void            __fastcall SetState(Speechlib_tlb::SpeechAudioState State/*[in]*/);
  __property Speechlib_tlb::ISpeechAudioFormatPtr Format={ read=get_Format };
  __property Speechlib_tlb::ISpeechAudioStatusPtr Status={ read=get_Status };
  __property Speechlib_tlb::ISpeechAudioBufferInfoPtr BufferInfo={ read=get_BufferInfo };
  __property Speechlib_tlb::ISpeechAudioFormatPtr DefaultFormat={ read=get_DefaultFormat };
  __property long EventHandle={ read=get_EventHandle };
  __property long MMHandle={ read=get_MMHandle };
  __property long Volume={ read=get_Volume, write=set_Volume, stored=false };
  __property long BufferNotifySize={ read=get_BufferNotifySize, write=set_BufferNotifySize, stored=false };
  __property long DeviceId={ read=get_DeviceId, write=set_DeviceId, stored=false };
  __property long LineId={ read=get_LineId, write=set_LineId, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpMMAudioOut
// Help String      : SpMMAudioOut Class
// Default Interface: ISpeechMMSysAudio
// Def. Intf. Object: ISpeechMMSysAudioPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpMMAudioOut : public Vcl::Oleserver::TOleServer
{
  ISpeechMMSysAudioPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpMMAudioOut(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechMMSysAudioPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechMMSysAudioPtr intf);


  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_Format(void);
  void            __fastcall _set_Format(Speechlib_tlb::ISpeechAudioFormat* AudioFormat/*[in]*/);
  Speechlib_tlb::ISpeechAudioStatusPtr __fastcall get_Status(void);
  Speechlib_tlb::ISpeechAudioBufferInfoPtr __fastcall get_BufferInfo(void);
  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_DefaultFormat(void);
  long            __fastcall get_Volume(void);
  void            __fastcall set_Volume(long Volume/*[in]*/);
  long            __fastcall get_BufferNotifySize(void);
  void            __fastcall set_BufferNotifySize(long BufferNotifySize/*[in]*/);
  long            __fastcall get_EventHandle(void);
  long            __fastcall get_DeviceId(void);
  void            __fastcall set_DeviceId(long DeviceId/*[in]*/);
  long            __fastcall get_LineId(void);
  void            __fastcall set_LineId(long LineId/*[in]*/);
  long            __fastcall get_MMHandle(void);
  long            __fastcall Read(VARIANT* Buffer/*[out]*/, long NumberOfBytes/*[in]*/);
  long            __fastcall Write(VARIANT Buffer/*[in]*/);
  VARIANT         __fastcall Seek(VARIANT Position/*[in]*/, 
                                  Speechlib_tlb::SpeechStreamSeekPositionType Origin/*[in,def,opt]*/);
  void            __fastcall SetState(Speechlib_tlb::SpeechAudioState State/*[in]*/);
  __property Speechlib_tlb::ISpeechAudioFormatPtr Format={ read=get_Format };
  __property Speechlib_tlb::ISpeechAudioStatusPtr Status={ read=get_Status };
  __property Speechlib_tlb::ISpeechAudioBufferInfoPtr BufferInfo={ read=get_BufferInfo };
  __property Speechlib_tlb::ISpeechAudioFormatPtr DefaultFormat={ read=get_DefaultFormat };
  __property long EventHandle={ read=get_EventHandle };
  __property long MMHandle={ read=get_MMHandle };
  __property long Volume={ read=get_Volume, write=set_Volume, stored=false };
  __property long BufferNotifySize={ read=get_BufferNotifySize, write=set_BufferNotifySize, stored=false };
  __property long DeviceId={ read=get_DeviceId, write=set_DeviceId, stored=false };
  __property long LineId={ read=get_LineId, write=set_LineId, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpStream
// Help String      : SpStream Class
// Default Interface: ISpStream
// Def. Intf. Object: ISpStreamPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpStream : public Vcl::Oleserver::TOleServer
{
  ISpStreamPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpStream(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpStreamPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpStreamPtr intf);


  void            __fastcall RemoteRead(unsigned_char* pv/*[out]*/, unsigned_long cb/*[in]*/, 
                                        unsigned_long* pcbRead/*[out]*/);
  void            __fastcall RemoteWrite(unsigned_char* pv/*[in]*/, unsigned_long cb/*[in]*/, 
                                         unsigned_long* pcbWritten/*[out]*/);
  void            __fastcall RemoteSeek(Speechlib_tlb::_LARGE_INTEGER dlibMove/*[in]*/, 
                                        unsigned_long dwOrigin/*[in]*/, 
                                        Speechlib_tlb::_ULARGE_INTEGER* plibNewPosition/*[out]*/);
  void            __fastcall SetSize(Speechlib_tlb::_ULARGE_INTEGER libNewSize/*[in]*/);
  void            __fastcall RemoteCopyTo(Speechlib_tlb::IStream* pstm/*[in]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER cb/*[in]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER* pcbRead/*[out]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER* pcbWritten/*[out]*/);
  void            __fastcall Commit(unsigned_long grfCommitFlags/*[in]*/);
  void            __fastcall Revert(void);
  void            __fastcall LockRegion(Speechlib_tlb::_ULARGE_INTEGER libOffset/*[in]*/, 
                                        Speechlib_tlb::_ULARGE_INTEGER cb/*[in]*/, 
                                        unsigned_long dwLockType/*[in]*/);
  void            __fastcall UnlockRegion(Speechlib_tlb::_ULARGE_INTEGER libOffset/*[in]*/, 
                                          Speechlib_tlb::_ULARGE_INTEGER cb/*[in]*/, 
                                          unsigned_long dwLockType/*[in]*/);
  void            __fastcall Stat(Speechlib_tlb::tagSTATSTG* pstatstg/*[out]*/, 
                                  unsigned_long grfStatFlag/*[in]*/);
  void            __fastcall Clone(Speechlib_tlb::IStream** ppstm/*[out]*/);
  void            __fastcall GetFormat(System::TGUID* pguidFormatId/*[in]*/, 
                                       Speechlib_tlb::WAVEFORMATEX** ppCoMemWaveFormatEx/*[out]*/);
  void            __fastcall SetBaseStream(Speechlib_tlb::IStream* pStream/*[in]*/, 
                                           System::TGUID* rguidFormat/*[in]*/, 
                                           Speechlib_tlb::WAVEFORMATEX* pWaveFormatEx/*[in]*/);
  void            __fastcall GetBaseStream(Speechlib_tlb::IStream** ppStream/*[out]*/);
  void            __fastcall BindToFile(LPWSTR pszFileName/*[in]*/, 
                                        Speechlib_tlb::SPFILEMODE eMode/*[in]*/, 
                                        System::TGUID* pFormatId/*[in]*/, 
                                        Speechlib_tlb::WAVEFORMATEX* pWaveFormatEx, 
                                        unsigned_int64 ullEventInterest/*[in]*/);
  void            __fastcall Close(void);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpVoice
// Help String      : SpVoice Class
// Default Interface: ISpeechVoice
// Def. Intf. Object: ISpeechVoicePtr
// Def. Intf. DISP? : No
// Event   Interface: _ISpeechVoiceEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TSpVoiceStartStream)(System::TObject * Sender, 
                                                          long StreamNumber/*[in]*/, 
                                                          VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceEndStream)(System::TObject * Sender, 
                                                        long StreamNumber/*[in]*/, 
                                                        VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceVoiceChange)(System::TObject * Sender, 
                                                          long StreamNumber/*[in]*/, 
                                                          VARIANT StreamPosition/*[in]*/, 
                                                          Speechlib_tlb::ISpeechObjectToken* VoiceObjectToken/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceBookmark)(System::TObject * Sender, 
                                                       long StreamNumber/*[in]*/, 
                                                       VARIANT StreamPosition/*[in]*/, 
                                                       BSTR Bookmark/*[in]*/, 
                                                       long BookmarkId/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceWord)(System::TObject * Sender, 
                                                   long StreamNumber/*[in]*/, 
                                                   VARIANT StreamPosition/*[in]*/, 
                                                   long CharacterPosition/*[in]*/, 
                                                   long Length/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceSentence)(System::TObject * Sender, 
                                                       long StreamNumber/*[in]*/, 
                                                       VARIANT StreamPosition/*[in]*/, 
                                                       long CharacterPosition/*[in]*/, 
                                                       long Length/*[in]*/);
typedef void __fastcall (__closure * TSpVoicePhoneme)(System::TObject * Sender, 
                                                      long StreamNumber/*[in]*/, 
                                                      VARIANT StreamPosition/*[in]*/, 
                                                      long Duration/*[in]*/, 
                                                      short NextPhoneId/*[in]*/, 
                                                      Speechlib_tlb::SpeechVisemeFeature Feature/*[in]*/, 
                                                      short CurrentPhoneId/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceViseme)(System::TObject * Sender, 
                                                     long StreamNumber/*[in]*/, 
                                                     VARIANT StreamPosition/*[in]*/, 
                                                     long Duration/*[in]*/, 
                                                     Speechlib_tlb::SpeechVisemeType NextVisemeId/*[in]*/, 
                                                     Speechlib_tlb::SpeechVisemeFeature Feature/*[in]*/, 
                                                     Speechlib_tlb::SpeechVisemeType CurrentVisemeId/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceAudioLevel)(System::TObject * Sender, 
                                                         long StreamNumber/*[in]*/, 
                                                         VARIANT StreamPosition/*[in]*/, 
                                                         long AudioLevel/*[in]*/);
typedef void __fastcall (__closure * TSpVoiceEnginePrivate)(System::TObject * Sender, 
                                                            long StreamNumber/*[in]*/, 
                                                            long StreamPosition/*[in]*/, 
                                                            VARIANT EngineData/*[in]*/);

class PACKAGE TSpVoice : public Vcl::Oleserver::TOleServer
{
  ISpeechVoicePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpVoice(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechVoicePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechVoicePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Vcl::Oleserver::TVariantArray& params);

  Speechlib_tlb::ISpeechVoiceStatusPtr __fastcall get_Status(void);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_Voice(void);
  void            __fastcall _set_Voice(Speechlib_tlb::ISpeechObjectToken* Voice/*[in]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_AudioOutput(void);
  void            __fastcall _set_AudioOutput(Speechlib_tlb::ISpeechObjectToken* AudioOutput/*[in]*/);
  Speechlib_tlb::ISpeechBaseStreamPtr __fastcall get_AudioOutputStream(void);
  void            __fastcall _set_AudioOutputStream(Speechlib_tlb::ISpeechBaseStream* AudioOutputStream/*[in]*/);
  long            __fastcall get_Rate(void);
  void            __fastcall set_Rate(long Rate/*[in]*/);
  long            __fastcall get_Volume(void);
  void            __fastcall set_Volume(long Volume/*[in]*/);
  void            __fastcall set_AllowAudioOutputFormatChangesOnNextSet(VARIANT_BOOL Allow/*[in]*/);
  VARIANT_BOOL    __fastcall get_AllowAudioOutputFormatChangesOnNextSet(void);
  Speechlib_tlb::SpeechVoiceEvents __fastcall get_EventInterests(void);
  void            __fastcall set_EventInterests(Speechlib_tlb::SpeechVoiceEvents EventInterestFlags/*[in]*/);
  void            __fastcall set_Priority(Speechlib_tlb::SpeechVoicePriority Priority/*[in]*/);
  Speechlib_tlb::SpeechVoicePriority __fastcall get_Priority(void);
  void            __fastcall set_AlertBoundary(Speechlib_tlb::SpeechVoiceEvents Boundary/*[in]*/);
  Speechlib_tlb::SpeechVoiceEvents __fastcall get_AlertBoundary(void);
  void            __fastcall set_SynchronousSpeakTimeout(long msTimeout/*[in]*/);
  long            __fastcall get_SynchronousSpeakTimeout(void);
  long            __fastcall Speak(BSTR Text/*[in]*/, 
                                   Speechlib_tlb::SpeechVoiceSpeakFlags Flags/*[in,def,opt]*/);
  long            __fastcall SpeakStream(Speechlib_tlb::ISpeechBaseStream* Stream/*[in]*/, 
                                         Speechlib_tlb::SpeechVoiceSpeakFlags Flags/*[in,def,opt]*/);
  void            __fastcall Pause(void);
  void            __fastcall Resume(void);
  long            __fastcall Skip(BSTR Type/*[in]*/, long NumItems/*[in]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetVoices(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                           BSTR OptionalAttributes/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetAudioOutputs(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                                 BSTR OptionalAttributes/*[in,def,opt]*/);
  VARIANT_BOOL    __fastcall WaitUntilDone(long msTimeout/*[in]*/);
  long            __fastcall SpeakCompleteEvent(void);
  VARIANT_BOOL    __fastcall IsUISupported(BSTR TypeOfUI/*[in]*/, 
                                           VARIANT* ExtraData/*[in,def,opt]*/= TNoParam());
  void            __fastcall DisplayUI(long hWndParent/*[in]*/, BSTR Title/*[in]*/, 
                                       BSTR TypeOfUI/*[in]*/, 
                                       VARIANT* ExtraData/*[in,def,opt]*/= TNoParam());
  __property Speechlib_tlb::ISpeechVoiceStatusPtr Status={ read=get_Status };
  __property Speechlib_tlb::ISpeechObjectTokenPtr Voice={ read=get_Voice };
  __property Speechlib_tlb::ISpeechObjectTokenPtr AudioOutput={ read=get_AudioOutput };
  __property Speechlib_tlb::ISpeechBaseStreamPtr AudioOutputStream={ read=get_AudioOutputStream };
  __property VARIANT_BOOL AllowAudioOutputFormatChangesOnNextSet={ read=get_AllowAudioOutputFormatChangesOnNextSet, write=set_AllowAudioOutputFormatChangesOnNextSet };
  __property long Rate={ read=get_Rate, write=set_Rate, stored=false };
  __property long Volume={ read=get_Volume, write=set_Volume, stored=false };
  __property Speechlib_tlb::SpeechVoiceEvents EventInterests={ read=get_EventInterests, write=set_EventInterests, stored=false };
  __property Speechlib_tlb::SpeechVoicePriority Priority={ read=get_Priority, write=set_Priority, stored=false };
  __property Speechlib_tlb::SpeechVoiceEvents AlertBoundary={ read=get_AlertBoundary, write=set_AlertBoundary, stored=false };
  __property long SynchronousSpeakTimeout={ read=get_SynchronousSpeakTimeout, write=set_SynchronousSpeakTimeout, stored=false };
private:
  TSpVoiceStartStream            FOnStartStream;
  TSpVoiceEndStream              FOnEndStream;
  TSpVoiceVoiceChange            FOnVoiceChange;
  TSpVoiceBookmark               FOnBookmark;
  TSpVoiceWord                   FOnWord;
  TSpVoiceSentence               FOnSentence;
  TSpVoicePhoneme                FOnPhoneme;
  TSpVoiceViseme                 FOnViseme;
  TSpVoiceAudioLevel             FOnAudioLevel;
  TSpVoiceEnginePrivate          FOnEnginePrivate;
__published:
  __property TSpVoiceStartStream OnStartStream={ read=FOnStartStream, write=FOnStartStream };
  __property TSpVoiceEndStream OnEndStream={ read=FOnEndStream, write=FOnEndStream };
  __property TSpVoiceVoiceChange OnVoiceChange={ read=FOnVoiceChange, write=FOnVoiceChange };
  __property TSpVoiceBookmark OnBookmark={ read=FOnBookmark, write=FOnBookmark };
  __property TSpVoiceWord OnWord={ read=FOnWord, write=FOnWord };
  __property TSpVoiceSentence OnSentence={ read=FOnSentence, write=FOnSentence };
  __property TSpVoicePhoneme OnPhoneme={ read=FOnPhoneme, write=FOnPhoneme };
  __property TSpVoiceViseme OnViseme={ read=FOnViseme, write=FOnViseme };
  __property TSpVoiceAudioLevel OnAudioLevel={ read=FOnAudioLevel, write=FOnAudioLevel };
  __property TSpVoiceEnginePrivate OnEnginePrivate={ read=FOnEnginePrivate, write=FOnEnginePrivate };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpSharedRecoContext
// Help String      : SpSharedRecoContext Class
// Default Interface: ISpeechRecoContext
// Def. Intf. Object: ISpeechRecoContextPtr
// Def. Intf. DISP? : No
// Event   Interface: _ISpeechRecoContextEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TSpSharedRecoContextStartStream)(System::TObject * Sender, 
                                                                      long StreamNumber/*[in]*/, 
                                                                      VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextEndStream)(System::TObject * Sender, 
                                                                    long StreamNumber/*[in]*/, 
                                                                    VARIANT StreamPosition/*[in]*/, 
                                                                    VARIANT_BOOL StreamReleased/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextBookmark)(System::TObject * Sender, 
                                                                   long StreamNumber/*[in]*/, 
                                                                   VARIANT StreamPosition/*[in]*/, 
                                                                   VARIANT BookmarkId/*[in]*/, 
                                                                   Speechlib_tlb::SpeechBookmarkOptions Options/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextSoundStart)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextSoundEnd)(System::TObject * Sender, 
                                                                   long StreamNumber/*[in]*/, 
                                                                   VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextPhraseStart)(System::TObject * Sender, 
                                                                      long StreamNumber/*[in]*/, 
                                                                      VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextRecognition)(System::TObject * Sender, 
                                                                      long StreamNumber/*[in]*/, 
                                                                      VARIANT StreamPosition/*[in]*/, 
                                                                      Speechlib_tlb::SpeechRecognitionType RecognitionType/*[in]*/, 
                                                                      Speechlib_tlb::ISpeechRecoResult* Result/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextHypothesis)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/, 
                                                                     Speechlib_tlb::ISpeechRecoResult* Result/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextPropertyNumberChange)(System::TObject * Sender, 
                                                                               long StreamNumber/*[in]*/, 
                                                                               VARIANT StreamPosition/*[in]*/, 
                                                                               BSTR PropertyName/*[in]*/, 
                                                                               long NewNumberValue/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextPropertyStringChange)(System::TObject * Sender, 
                                                                               long StreamNumber/*[in]*/, 
                                                                               VARIANT StreamPosition/*[in]*/, 
                                                                               BSTR PropertyName/*[in]*/, 
                                                                               BSTR NewStringValue/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextFalseRecognition)(System::TObject * Sender, 
                                                                           long StreamNumber/*[in]*/, 
                                                                           VARIANT StreamPosition/*[in]*/, 
                                                                           Speechlib_tlb::ISpeechRecoResult* Result/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextInterference)(System::TObject * Sender, 
                                                                       long StreamNumber/*[in]*/, 
                                                                       VARIANT StreamPosition/*[in]*/, 
                                                                       Speechlib_tlb::SpeechInterference Interference/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextRequestUI)(System::TObject * Sender, 
                                                                    long StreamNumber/*[in]*/, 
                                                                    VARIANT StreamPosition/*[in]*/, 
                                                                    BSTR UIType/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextRecognizerStateChange)(System::TObject * Sender, 
                                                                                long StreamNumber/*[in]*/, 
                                                                                VARIANT StreamPosition/*[in]*/, 
                                                                                Speechlib_tlb::SpeechRecognizerState NewState/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextAdaptation)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextRecognitionForOtherContext)(System::TObject * Sender, 
                                                                                     long StreamNumber/*[in]*/, 
                                                                                     VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextAudioLevel)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/, 
                                                                     long AudioLevel/*[in]*/);
typedef void __fastcall (__closure * TSpSharedRecoContextEnginePrivate)(System::TObject * Sender, 
                                                                        long StreamNumber/*[in]*/, 
                                                                        VARIANT StreamPosition/*[in]*/, 
                                                                        VARIANT EngineData/*[in]*/);

class PACKAGE TSpSharedRecoContext : public Vcl::Oleserver::TOleServer
{
  ISpeechRecoContextPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpSharedRecoContext(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechRecoContextPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechRecoContextPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Vcl::Oleserver::TVariantArray& params);

  Speechlib_tlb::ISpeechRecognizerPtr __fastcall get_Recognizer(void);
  Speechlib_tlb::SpeechInterference __fastcall get_AudioInputInterferenceStatus(void);
  BSTR            __fastcall get_RequestedUIType(void);
  void            __fastcall _set_Voice(Speechlib_tlb::ISpeechVoice* Voice/*[in]*/);
  Speechlib_tlb::ISpeechVoicePtr __fastcall get_Voice(void);
  void            __fastcall set_AllowVoiceFormatMatchingOnNextSet(VARIANT_BOOL pAllow/*[in]*/);
  VARIANT_BOOL    __fastcall get_AllowVoiceFormatMatchingOnNextSet(void);
  void            __fastcall set_VoicePurgeEvent(Speechlib_tlb::SpeechRecoEvents EventInterest/*[in]*/);
  Speechlib_tlb::SpeechRecoEvents __fastcall get_VoicePurgeEvent(void);
  void            __fastcall set_EventInterests(Speechlib_tlb::SpeechRecoEvents EventInterest/*[in]*/);
  Speechlib_tlb::SpeechRecoEvents __fastcall get_EventInterests(void);
  void            __fastcall set_CmdMaxAlternates(long MaxAlternates/*[in]*/);
  long            __fastcall get_CmdMaxAlternates(void);
  void            __fastcall set_State(Speechlib_tlb::SpeechRecoContextState State/*[in]*/);
  Speechlib_tlb::SpeechRecoContextState __fastcall get_State(void);
  void            __fastcall set_RetainedAudio(Speechlib_tlb::SpeechRetainedAudioOptions Option/*[in]*/);
  Speechlib_tlb::SpeechRetainedAudioOptions __fastcall get_RetainedAudio(void);
  void            __fastcall _set_RetainedAudioFormat(Speechlib_tlb::ISpeechAudioFormat* Format/*[in]*/);
  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_RetainedAudioFormat(void);
  void            __fastcall Pause(void);
  void            __fastcall Resume(void);
  Speechlib_tlb::ISpeechRecoGrammar* __fastcall CreateGrammar(VARIANT GrammarId/*[in,def,opt]*/= TNoParam());
  Speechlib_tlb::ISpeechRecoResult* __fastcall CreateResultFromMemory(VARIANT* ResultBlock/*[in]*/);
  void            __fastcall Bookmark(Speechlib_tlb::SpeechBookmarkOptions Options/*[in]*/, 
                                      VARIANT StreamPos/*[in]*/, VARIANT BookmarkId/*[in]*/);
  void            __fastcall SetAdaptationData(BSTR AdaptationString/*[in]*/);
  __property Speechlib_tlb::ISpeechRecognizerPtr Recognizer={ read=get_Recognizer };
  __property Speechlib_tlb::SpeechInterference AudioInputInterferenceStatus={ read=get_AudioInputInterferenceStatus };
  __property BSTR RequestedUIType={ read=get_RequestedUIType };
  __property Speechlib_tlb::ISpeechVoice* Voice={ read=get_Voice };
  __property VARIANT_BOOL AllowVoiceFormatMatchingOnNextSet={ read=get_AllowVoiceFormatMatchingOnNextSet, write=set_AllowVoiceFormatMatchingOnNextSet };
  __property Speechlib_tlb::ISpeechAudioFormat* RetainedAudioFormat={ read=get_RetainedAudioFormat };
  __property Speechlib_tlb::SpeechRecoEvents VoicePurgeEvent={ read=get_VoicePurgeEvent, write=set_VoicePurgeEvent, stored=false };
  __property Speechlib_tlb::SpeechRecoEvents EventInterests={ read=get_EventInterests, write=set_EventInterests, stored=false };
  __property long CmdMaxAlternates={ read=get_CmdMaxAlternates, write=set_CmdMaxAlternates, stored=false };
  __property Speechlib_tlb::SpeechRecoContextState State={ read=get_State, write=set_State, stored=false };
  __property Speechlib_tlb::SpeechRetainedAudioOptions RetainedAudio={ read=get_RetainedAudio, write=set_RetainedAudio, stored=false };
private:
  TSpSharedRecoContextStartStream FOnStartStream;
  TSpSharedRecoContextEndStream  FOnEndStream;
  TSpSharedRecoContextBookmark   FOnBookmark;
  TSpSharedRecoContextSoundStart FOnSoundStart;
  TSpSharedRecoContextSoundEnd   FOnSoundEnd;
  TSpSharedRecoContextPhraseStart FOnPhraseStart;
  TSpSharedRecoContextRecognition FOnRecognition;
  TSpSharedRecoContextHypothesis FOnHypothesis;
  TSpSharedRecoContextPropertyNumberChange FOnPropertyNumberChange;
  TSpSharedRecoContextPropertyStringChange FOnPropertyStringChange;
  TSpSharedRecoContextFalseRecognition FOnFalseRecognition;
  TSpSharedRecoContextInterference FOnInterference;
  TSpSharedRecoContextRequestUI  FOnRequestUI;
  TSpSharedRecoContextRecognizerStateChange FOnRecognizerStateChange;
  TSpSharedRecoContextAdaptation FOnAdaptation;
  TSpSharedRecoContextRecognitionForOtherContext FOnRecognitionForOtherContext;
  TSpSharedRecoContextAudioLevel FOnAudioLevel;
  TSpSharedRecoContextEnginePrivate FOnEnginePrivate;
__published:
  __property TSpSharedRecoContextStartStream OnStartStream={ read=FOnStartStream, write=FOnStartStream };
  __property TSpSharedRecoContextEndStream OnEndStream={ read=FOnEndStream, write=FOnEndStream };
  __property TSpSharedRecoContextBookmark OnBookmark={ read=FOnBookmark, write=FOnBookmark };
  __property TSpSharedRecoContextSoundStart OnSoundStart={ read=FOnSoundStart, write=FOnSoundStart };
  __property TSpSharedRecoContextSoundEnd OnSoundEnd={ read=FOnSoundEnd, write=FOnSoundEnd };
  __property TSpSharedRecoContextPhraseStart OnPhraseStart={ read=FOnPhraseStart, write=FOnPhraseStart };
  __property TSpSharedRecoContextRecognition OnRecognition={ read=FOnRecognition, write=FOnRecognition };
  __property TSpSharedRecoContextHypothesis OnHypothesis={ read=FOnHypothesis, write=FOnHypothesis };
  __property TSpSharedRecoContextPropertyNumberChange OnPropertyNumberChange={ read=FOnPropertyNumberChange, write=FOnPropertyNumberChange };
  __property TSpSharedRecoContextPropertyStringChange OnPropertyStringChange={ read=FOnPropertyStringChange, write=FOnPropertyStringChange };
  __property TSpSharedRecoContextFalseRecognition OnFalseRecognition={ read=FOnFalseRecognition, write=FOnFalseRecognition };
  __property TSpSharedRecoContextInterference OnInterference={ read=FOnInterference, write=FOnInterference };
  __property TSpSharedRecoContextRequestUI OnRequestUI={ read=FOnRequestUI, write=FOnRequestUI };
  __property TSpSharedRecoContextRecognizerStateChange OnRecognizerStateChange={ read=FOnRecognizerStateChange, write=FOnRecognizerStateChange };
  __property TSpSharedRecoContextAdaptation OnAdaptation={ read=FOnAdaptation, write=FOnAdaptation };
  __property TSpSharedRecoContextRecognitionForOtherContext OnRecognitionForOtherContext={ read=FOnRecognitionForOtherContext, write=FOnRecognitionForOtherContext };
  __property TSpSharedRecoContextAudioLevel OnAudioLevel={ read=FOnAudioLevel, write=FOnAudioLevel };
  __property TSpSharedRecoContextEnginePrivate OnEnginePrivate={ read=FOnEnginePrivate, write=FOnEnginePrivate };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpInprocRecognizer
// Help String      : SpInprocRecognizer Class
// Default Interface: ISpeechRecognizer
// Def. Intf. Object: ISpeechRecognizerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpInprocRecognizer : public Vcl::Oleserver::TOleServer
{
  ISpeechRecognizerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpInprocRecognizer(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechRecognizerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechRecognizerPtr intf);


  void            __fastcall _set_Recognizer(Speechlib_tlb::ISpeechObjectToken* Recognizer/*[in]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_Recognizer(void);
  void            __fastcall set_AllowAudioInputFormatChangesOnNextSet(VARIANT_BOOL Allow/*[in]*/);
  VARIANT_BOOL    __fastcall get_AllowAudioInputFormatChangesOnNextSet(void);
  void            __fastcall _set_AudioInput(Speechlib_tlb::ISpeechObjectToken* AudioInput/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_AudioInput(void);
  void            __fastcall _set_AudioInputStream(Speechlib_tlb::ISpeechBaseStream* AudioInputStream/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechBaseStreamPtr __fastcall get_AudioInputStream(void);
  VARIANT_BOOL    __fastcall get_IsShared(void);
  void            __fastcall set_State(Speechlib_tlb::SpeechRecognizerState State/*[in]*/);
  Speechlib_tlb::SpeechRecognizerState __fastcall get_State(void);
  Speechlib_tlb::ISpeechRecognizerStatusPtr __fastcall get_Status(void);
  void            __fastcall _set_Profile(Speechlib_tlb::ISpeechObjectToken* Profile/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_Profile(void);
  void            __fastcall EmulateRecognition(VARIANT TextElements/*[in]*/, 
                                                VARIANT* ElementDisplayAttributes/*[in,def,opt]*/, 
                                                long LanguageId/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechRecoContext* __fastcall CreateRecoContext(void);
  Speechlib_tlb::ISpeechAudioFormat* __fastcall GetFormat(Speechlib_tlb::SpeechFormatType Type/*[in]*/);
  VARIANT_BOOL    __fastcall SetPropertyNumber(BSTR Name/*[in]*/, long Value/*[in]*/);
  VARIANT_BOOL    __fastcall GetPropertyNumber(BSTR Name/*[in]*/, long* Value/*[in,out]*/);
  VARIANT_BOOL    __fastcall SetPropertyString(BSTR Name/*[in]*/, BSTR Value/*[in]*/);
  VARIANT_BOOL    __fastcall GetPropertyString(BSTR Name/*[in]*/, BSTR* Value/*[in,out]*/);
  VARIANT_BOOL    __fastcall IsUISupported(BSTR TypeOfUI/*[in]*/, 
                                           VARIANT* ExtraData/*[in,def,opt]*/= TNoParam());
  void            __fastcall DisplayUI(long hWndParent/*[in]*/, BSTR Title/*[in]*/, 
                                       BSTR TypeOfUI/*[in]*/, 
                                       VARIANT* ExtraData/*[in,def,opt]*/= TNoParam());
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetRecognizers(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                                BSTR OptionalAttributes/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetAudioInputs(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                                BSTR OptionalAttributes/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetProfiles(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                             BSTR OptionalAttributes/*[in,def,opt]*/);
  __property Speechlib_tlb::ISpeechObjectToken* Recognizer={ read=get_Recognizer };
  __property VARIANT_BOOL AllowAudioInputFormatChangesOnNextSet={ read=get_AllowAudioInputFormatChangesOnNextSet, write=set_AllowAudioInputFormatChangesOnNextSet };
  __property Speechlib_tlb::ISpeechObjectToken* AudioInput={ read=get_AudioInput };
  __property Speechlib_tlb::ISpeechBaseStream* AudioInputStream={ read=get_AudioInputStream };
  __property VARIANT_BOOL IsShared={ read=get_IsShared };
  __property Speechlib_tlb::ISpeechRecognizerStatusPtr Status={ read=get_Status };
  __property Speechlib_tlb::ISpeechObjectToken* Profile={ read=get_Profile };
  __property Speechlib_tlb::SpeechRecognizerState State={ read=get_State, write=set_State, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpSharedRecognizer
// Help String      : SpSharedRecognizer Class
// Default Interface: ISpeechRecognizer
// Def. Intf. Object: ISpeechRecognizerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpSharedRecognizer : public Vcl::Oleserver::TOleServer
{
  ISpeechRecognizerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpSharedRecognizer(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechRecognizerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechRecognizerPtr intf);


  void            __fastcall _set_Recognizer(Speechlib_tlb::ISpeechObjectToken* Recognizer/*[in]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_Recognizer(void);
  void            __fastcall set_AllowAudioInputFormatChangesOnNextSet(VARIANT_BOOL Allow/*[in]*/);
  VARIANT_BOOL    __fastcall get_AllowAudioInputFormatChangesOnNextSet(void);
  void            __fastcall _set_AudioInput(Speechlib_tlb::ISpeechObjectToken* AudioInput/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_AudioInput(void);
  void            __fastcall _set_AudioInputStream(Speechlib_tlb::ISpeechBaseStream* AudioInputStream/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechBaseStreamPtr __fastcall get_AudioInputStream(void);
  VARIANT_BOOL    __fastcall get_IsShared(void);
  void            __fastcall set_State(Speechlib_tlb::SpeechRecognizerState State/*[in]*/);
  Speechlib_tlb::SpeechRecognizerState __fastcall get_State(void);
  Speechlib_tlb::ISpeechRecognizerStatusPtr __fastcall get_Status(void);
  void            __fastcall _set_Profile(Speechlib_tlb::ISpeechObjectToken* Profile/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokenPtr __fastcall get_Profile(void);
  void            __fastcall EmulateRecognition(VARIANT TextElements/*[in]*/, 
                                                VARIANT* ElementDisplayAttributes/*[in,def,opt]*/, 
                                                long LanguageId/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechRecoContext* __fastcall CreateRecoContext(void);
  Speechlib_tlb::ISpeechAudioFormat* __fastcall GetFormat(Speechlib_tlb::SpeechFormatType Type/*[in]*/);
  VARIANT_BOOL    __fastcall SetPropertyNumber(BSTR Name/*[in]*/, long Value/*[in]*/);
  VARIANT_BOOL    __fastcall GetPropertyNumber(BSTR Name/*[in]*/, long* Value/*[in,out]*/);
  VARIANT_BOOL    __fastcall SetPropertyString(BSTR Name/*[in]*/, BSTR Value/*[in]*/);
  VARIANT_BOOL    __fastcall GetPropertyString(BSTR Name/*[in]*/, BSTR* Value/*[in,out]*/);
  VARIANT_BOOL    __fastcall IsUISupported(BSTR TypeOfUI/*[in]*/, 
                                           VARIANT* ExtraData/*[in,def,opt]*/= TNoParam());
  void            __fastcall DisplayUI(long hWndParent/*[in]*/, BSTR Title/*[in]*/, 
                                       BSTR TypeOfUI/*[in]*/, 
                                       VARIANT* ExtraData/*[in,def,opt]*/= TNoParam());
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetRecognizers(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                                BSTR OptionalAttributes/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetAudioInputs(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                                BSTR OptionalAttributes/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechObjectTokens* __fastcall GetProfiles(BSTR RequiredAttributes/*[in,def,opt]*/, 
                                                             BSTR OptionalAttributes/*[in,def,opt]*/);
  __property Speechlib_tlb::ISpeechObjectToken* Recognizer={ read=get_Recognizer };
  __property VARIANT_BOOL AllowAudioInputFormatChangesOnNextSet={ read=get_AllowAudioInputFormatChangesOnNextSet, write=set_AllowAudioInputFormatChangesOnNextSet };
  __property Speechlib_tlb::ISpeechObjectToken* AudioInput={ read=get_AudioInput };
  __property Speechlib_tlb::ISpeechBaseStream* AudioInputStream={ read=get_AudioInputStream };
  __property VARIANT_BOOL IsShared={ read=get_IsShared };
  __property Speechlib_tlb::ISpeechRecognizerStatusPtr Status={ read=get_Status };
  __property Speechlib_tlb::ISpeechObjectToken* Profile={ read=get_Profile };
  __property Speechlib_tlb::SpeechRecognizerState State={ read=get_State, write=set_State, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpLexicon
// Help String      : SpLexicon Class
// Default Interface: ISpeechLexicon
// Def. Intf. Object: ISpeechLexiconPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpLexicon : public Vcl::Oleserver::TOleServer
{
  ISpeechLexiconPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpLexicon(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechLexiconPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechLexiconPtr intf);


  long            __fastcall get_GenerationId(void);
  Speechlib_tlb::ISpeechLexiconWords* __fastcall GetWords(Speechlib_tlb::SpeechLexiconType Flags/*[in,def,opt]*/, 
                                                          long* GenerationId/*[out,def,opt]*/);
  void            __fastcall AddPronunciation(BSTR bstrWord/*[in]*/, long LangId/*[in]*/, 
                                              Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                              BSTR bstrPronunciation/*[in,def,opt]*/);
  void            __fastcall AddPronunciationByPhoneIds(BSTR bstrWord/*[in]*/, long LangId/*[in]*/, 
                                                        Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                                        VARIANT* PhoneIds/*[in,def,opt]*/= TNoParam());
  void            __fastcall RemovePronunciation(BSTR bstrWord/*[in]*/, long LangId/*[in]*/, 
                                                 Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                                 BSTR bstrPronunciation/*[in,def,opt]*/);
  void            __fastcall RemovePronunciationByPhoneIds(BSTR bstrWord/*[in]*/, 
                                                           long LangId/*[in]*/, 
                                                           Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                                           VARIANT* PhoneIds/*[in,def,opt]*/= TNoParam());
  Speechlib_tlb::ISpeechLexiconPronunciations* __fastcall GetPronunciations(BSTR bstrWord/*[in]*/, 
                                                                            long LangId/*[in,def,opt]*/, 
                                                                            Speechlib_tlb::SpeechLexiconType TypeFlags/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechLexiconWords* __fastcall GetGenerationChange(long* GenerationId/*[in,out]*/);
  __property long GenerationId={ read=get_GenerationId };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpUnCompressedLexicon
// Help String      : SpUnCompressedLexicon Class
// Default Interface: ISpeechLexicon
// Def. Intf. Object: ISpeechLexiconPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpUnCompressedLexicon : public Vcl::Oleserver::TOleServer
{
  ISpeechLexiconPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpUnCompressedLexicon(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechLexiconPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechLexiconPtr intf);


  long            __fastcall get_GenerationId(void);
  Speechlib_tlb::ISpeechLexiconWords* __fastcall GetWords(Speechlib_tlb::SpeechLexiconType Flags/*[in,def,opt]*/, 
                                                          long* GenerationId/*[out,def,opt]*/);
  void            __fastcall AddPronunciation(BSTR bstrWord/*[in]*/, long LangId/*[in]*/, 
                                              Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                              BSTR bstrPronunciation/*[in,def,opt]*/);
  void            __fastcall AddPronunciationByPhoneIds(BSTR bstrWord/*[in]*/, long LangId/*[in]*/, 
                                                        Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                                        VARIANT* PhoneIds/*[in,def,opt]*/= TNoParam());
  void            __fastcall RemovePronunciation(BSTR bstrWord/*[in]*/, long LangId/*[in]*/, 
                                                 Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                                 BSTR bstrPronunciation/*[in,def,opt]*/);
  void            __fastcall RemovePronunciationByPhoneIds(BSTR bstrWord/*[in]*/, 
                                                           long LangId/*[in]*/, 
                                                           Speechlib_tlb::SpeechPartOfSpeech PartOfSpeech/*[in,def,opt]*/, 
                                                           VARIANT* PhoneIds/*[in,def,opt]*/= TNoParam());
  Speechlib_tlb::ISpeechLexiconPronunciations* __fastcall GetPronunciations(BSTR bstrWord/*[in]*/, 
                                                                            long LangId/*[in,def,opt]*/, 
                                                                            Speechlib_tlb::SpeechLexiconType TypeFlags/*[in,def,opt]*/);
  Speechlib_tlb::ISpeechLexiconWords* __fastcall GetGenerationChange(long* GenerationId/*[in,out]*/);
  __property long GenerationId={ read=get_GenerationId };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpCompressedLexicon
// Help String      : SpCompressedLexicon Class
// Default Interface: ISpLexicon
// Def. Intf. Object: ISpLexiconPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpCompressedLexicon : public Vcl::Oleserver::TOleServer
{
  ISpLexiconPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpCompressedLexicon(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpLexiconPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpLexiconPtr intf);


  void            __fastcall GetPronunciations(LPWSTR pszWord/*[in]*/, unsigned_short LangId/*[in]*/, 
                                               unsigned_long dwFlags/*[in]*/, 
                                               Speechlib_tlb::SPWORDPRONUNCIATIONLIST* pWordPronunciationList/*[in,out]*/);
  void            __fastcall AddPronunciation(LPWSTR pszWord/*[in]*/, unsigned_short LangId/*[in]*/, 
                                              Speechlib_tlb::SPPARTOFSPEECH ePartOfSpeech/*[in]*/, 
                                              LPWSTR pszPronunciation/*[in]*/);
  void            __fastcall RemovePronunciation(LPWSTR pszWord/*[in]*/, 
                                                 unsigned_short LangId/*[in]*/, 
                                                 Speechlib_tlb::SPPARTOFSPEECH ePartOfSpeech/*[in]*/, 
                                                 LPWSTR pszPronunciation/*[in]*/);
  void            __fastcall GetGeneration(unsigned_long* pdwGeneration/*[out]*/);
  void            __fastcall GetGenerationChange(unsigned_long dwFlags/*[in]*/, 
                                                 unsigned_long* pdwGeneration/*[in,out]*/, 
                                                 Speechlib_tlb::SPWORDLIST* pWordList/*[in,out]*/);
  void            __fastcall GetWords(unsigned_long dwFlags/*[in]*/, 
                                      unsigned_long* pdwGeneration/*[in,out]*/, 
                                      unsigned_long* pdwCookie/*[in,out]*/, 
                                      Speechlib_tlb::SPWORDLIST* pWordList/*[in,out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpShortcut
// Help String      : SpShortcut Class
// Default Interface: ISpShortcut
// Def. Intf. Object: ISpShortcutPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpShortcut : public Vcl::Oleserver::TOleServer
{
  ISpShortcutPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpShortcut(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpShortcutPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpShortcutPtr intf);


  void            __fastcall AddShortcut(LPWSTR pszDisplay/*[in]*/, unsigned_short LangId/*[in]*/, 
                                         LPWSTR pszSpoken/*[in]*/, 
                                         Speechlib_tlb::SPSHORTCUTTYPE shType/*[in]*/);
  void            __fastcall RemoveShortcut(LPWSTR pszDisplay/*[in]*/, unsigned_short LangId/*[in]*/, 
                                            LPWSTR pszSpoken/*[in]*/, 
                                            Speechlib_tlb::SPSHORTCUTTYPE shType/*[in]*/);
  void            __fastcall GetShortcuts(unsigned_short LangId/*[in]*/, 
                                          Speechlib_tlb::SPSHORTCUTPAIRLIST* pShortcutpairList/*[in,out]*/);
  void            __fastcall GetGeneration(unsigned_long* pdwGeneration/*[out]*/);
  void            __fastcall GetWordsFromGenerationChange(unsigned_long* pdwGeneration/*[in,out]*/, 
                                                          Speechlib_tlb::SPWORDLIST* pWordList/*[in,out]*/);
  void            __fastcall GetWords(unsigned_long* pdwGeneration/*[in,out]*/, 
                                      unsigned_long* pdwCookie/*[in,out]*/, 
                                      Speechlib_tlb::SPWORDLIST* pWordList/*[in,out]*/);
  void            __fastcall GetShortcutsForGeneration(unsigned_long* pdwGeneration/*[in,out]*/, 
                                                       unsigned_long* pdwCookie/*[in,out]*/, 
                                                       Speechlib_tlb::SPSHORTCUTPAIRLIST* pShortcutpairList/*[in,out]*/);
  void            __fastcall GetGenerationChange(unsigned_long* pdwGeneration/*[in,out]*/, 
                                                 Speechlib_tlb::SPSHORTCUTPAIRLIST* pShortcutpairList/*[in,out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpPhoneConverter
// Help String      : SpPhoneConverter Class
// Default Interface: ISpeechPhoneConverter
// Def. Intf. Object: ISpeechPhoneConverterPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpPhoneConverter : public Vcl::Oleserver::TOleServer
{
  ISpeechPhoneConverterPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpPhoneConverter(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechPhoneConverterPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechPhoneConverterPtr intf);


  long            __fastcall get_LanguageId(void);
  void            __fastcall set_LanguageId(long LanguageId/*[in]*/);
  VARIANT         __fastcall PhoneToId(BSTR Phonemes/*[in]*/);
  BSTR            __fastcall IdToPhone(VARIANT IdArray/*[in]*/);
  __property long LanguageId={ read=get_LanguageId, write=set_LanguageId, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpPhoneticAlphabetConverter
// Help String      : SpPhoneticAlphabetConverter Class
// Default Interface: ISpPhoneticAlphabetConverter
// Def. Intf. Object: ISpPhoneticAlphabetConverterPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpPhoneticAlphabetConverter : public Vcl::Oleserver::TOleServer
{
  ISpPhoneticAlphabetConverterPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpPhoneticAlphabetConverter(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpPhoneticAlphabetConverterPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpPhoneticAlphabetConverterPtr intf);


  void            __fastcall GetLangId(unsigned_short* pLangID/*[out]*/);
  void            __fastcall SetLangId(unsigned_short LangId/*[in]*/);
  void            __fastcall SAPI2UPS(unsigned_short* pszSAPIId/*[in]*/, 
                                      unsigned_short* pszUPSId/*[out]*/, 
                                      unsigned_long cMaxLength/*[in]*/);
  void            __fastcall UPS2SAPI(unsigned_short* pszUPSId/*[in]*/, 
                                      unsigned_short* pszSAPIId/*[out]*/, 
                                      unsigned_long cMaxLength/*[in]*/);
  void            __fastcall GetMaxConvertLength(unsigned_long cSrcLength/*[in]*/, 
                                                 long bSAPI2UPS/*[in]*/, 
                                                 unsigned_long* pcMaxDestLength/*[out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpNullPhoneConverter
// Help String      : SpNullPhoneConverter Class
// Default Interface: ISpPhoneConverter
// Def. Intf. Object: ISpPhoneConverterPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (530) CanCreate Hidden Restricted
// *********************************************************************//
class PACKAGE TSpNullPhoneConverter : public Vcl::Oleserver::TOleServer
{
  ISpPhoneConverterPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpNullPhoneConverter(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpPhoneConverterPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpPhoneConverterPtr intf);


  void            __fastcall SetObjectToken(Speechlib_tlb::ISpObjectToken* pToken/*[in]*/);
  void            __fastcall GetObjectToken(Speechlib_tlb::ISpObjectToken** ppToken/*[out]*/);
  void            __fastcall PhoneToId(LPWSTR pszPhone/*[in]*/, unsigned_short* pId/*[out]*/);
  void            __fastcall IdToPhone(LPWSTR pId/*[in]*/, unsigned_short* pszPhone/*[out]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpTextSelectionInformation
// Help String      : SpTextSelectionInformation Class
// Default Interface: ISpeechTextSelectionInformation
// Def. Intf. Object: ISpeechTextSelectionInformationPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpTextSelectionInformation : public Vcl::Oleserver::TOleServer
{
  ISpeechTextSelectionInformationPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpTextSelectionInformation(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechTextSelectionInformationPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechTextSelectionInformationPtr intf);


  void            __fastcall set_ActiveOffset(long ActiveOffset/*[in]*/);
  long            __fastcall get_ActiveOffset(void);
  void            __fastcall set_ActiveLength(long ActiveLength/*[in]*/);
  long            __fastcall get_ActiveLength(void);
  void            __fastcall set_SelectionOffset(long SelectionOffset/*[in]*/);
  long            __fastcall get_SelectionOffset(void);
  void            __fastcall set_SelectionLength(long SelectionLength/*[in]*/);
  long            __fastcall get_SelectionLength(void);
  __property long ActiveOffset={ read=get_ActiveOffset, write=set_ActiveOffset, stored=false };
  __property long ActiveLength={ read=get_ActiveLength, write=set_ActiveLength, stored=false };
  __property long SelectionOffset={ read=get_SelectionOffset, write=set_SelectionOffset, stored=false };
  __property long SelectionLength={ read=get_SelectionLength, write=set_SelectionLength, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpPhraseInfoBuilder
// Help String      : SpPhraseInfoBuilder Class
// Default Interface: ISpeechPhraseInfoBuilder
// Def. Intf. Object: ISpeechPhraseInfoBuilderPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpPhraseInfoBuilder : public Vcl::Oleserver::TOleServer
{
  ISpeechPhraseInfoBuilderPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpPhraseInfoBuilder(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechPhraseInfoBuilderPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechPhraseInfoBuilderPtr intf);


  Speechlib_tlb::ISpeechPhraseInfo* __fastcall RestorePhraseFromMemory(VARIANT* PhraseInMemory/*[in]*/);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpAudioFormat
// Help String      : SpAudioFormat Class
// Default Interface: ISpeechAudioFormat
// Def. Intf. Object: ISpeechAudioFormatPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpAudioFormat : public Vcl::Oleserver::TOleServer
{
  ISpeechAudioFormatPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpAudioFormat(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechAudioFormatPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechAudioFormatPtr intf);


  Speechlib_tlb::SpeechAudioFormatType __fastcall get_Type(void);
  void            __fastcall set_Type(Speechlib_tlb::SpeechAudioFormatType AudioFormat/*[in]*/);
  BSTR            __fastcall get_Guid(void);
  void            __fastcall set_Guid(BSTR Guid/*[in]*/);
  Speechlib_tlb::ISpeechWaveFormatEx* __fastcall GetWaveFormatEx(void);
  void            __fastcall SetWaveFormatEx(Speechlib_tlb::ISpeechWaveFormatEx* SpeechWaveFormatEx/*[in]*/);
  __property BSTR Guid={ read=get_Guid, write=set_Guid };
  __property Speechlib_tlb::SpeechAudioFormatType Type={ read=get_Type, write=set_Type, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpWaveFormatEx
// Help String      : SpWaveFormatEx Class
// Default Interface: ISpeechWaveFormatEx
// Def. Intf. Object: ISpeechWaveFormatExPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpWaveFormatEx : public Vcl::Oleserver::TOleServer
{
  ISpeechWaveFormatExPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpWaveFormatEx(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechWaveFormatExPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechWaveFormatExPtr intf);


  short           __fastcall get_FormatTag(void);
  void            __fastcall set_FormatTag(short FormatTag/*[in]*/);
  short           __fastcall get_Channels(void);
  void            __fastcall set_Channels(short Channels/*[in]*/);
  long            __fastcall get_SamplesPerSec(void);
  void            __fastcall set_SamplesPerSec(long SamplesPerSec/*[in]*/);
  long            __fastcall get_AvgBytesPerSec(void);
  void            __fastcall set_AvgBytesPerSec(long AvgBytesPerSec/*[in]*/);
  short           __fastcall get_BlockAlign(void);
  void            __fastcall set_BlockAlign(short BlockAlign/*[in]*/);
  short           __fastcall get_BitsPerSample(void);
  void            __fastcall set_BitsPerSample(short BitsPerSample/*[in]*/);
  VARIANT         __fastcall get_ExtraData(void);
  void            __fastcall set_ExtraData(VARIANT ExtraData/*[in]*/);
  __property VARIANT ExtraData={ read=get_ExtraData, write=set_ExtraData };
  __property short FormatTag={ read=get_FormatTag, write=set_FormatTag, stored=false };
  __property short Channels={ read=get_Channels, write=set_Channels, stored=false };
  __property long SamplesPerSec={ read=get_SamplesPerSec, write=set_SamplesPerSec, stored=false };
  __property long AvgBytesPerSec={ read=get_AvgBytesPerSec, write=set_AvgBytesPerSec, stored=false };
  __property short BlockAlign={ read=get_BlockAlign, write=set_BlockAlign, stored=false };
  __property short BitsPerSample={ read=get_BitsPerSample, write=set_BitsPerSample, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpInProcRecoContext
// Help String      : SpInProcRecoContext Class
// Default Interface: ISpeechRecoContext
// Def. Intf. Object: ISpeechRecoContextPtr
// Def. Intf. DISP? : No
// Event   Interface: _ISpeechRecoContextEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TSpInProcRecoContextStartStream)(System::TObject * Sender, 
                                                                      long StreamNumber/*[in]*/, 
                                                                      VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextEndStream)(System::TObject * Sender, 
                                                                    long StreamNumber/*[in]*/, 
                                                                    VARIANT StreamPosition/*[in]*/, 
                                                                    VARIANT_BOOL StreamReleased/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextBookmark)(System::TObject * Sender, 
                                                                   long StreamNumber/*[in]*/, 
                                                                   VARIANT StreamPosition/*[in]*/, 
                                                                   VARIANT BookmarkId/*[in]*/, 
                                                                   Speechlib_tlb::SpeechBookmarkOptions Options/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextSoundStart)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextSoundEnd)(System::TObject * Sender, 
                                                                   long StreamNumber/*[in]*/, 
                                                                   VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextPhraseStart)(System::TObject * Sender, 
                                                                      long StreamNumber/*[in]*/, 
                                                                      VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextRecognition)(System::TObject * Sender, 
                                                                      long StreamNumber/*[in]*/, 
                                                                      VARIANT StreamPosition/*[in]*/, 
                                                                      Speechlib_tlb::SpeechRecognitionType RecognitionType/*[in]*/, 
                                                                      Speechlib_tlb::ISpeechRecoResult* Result/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextHypothesis)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/, 
                                                                     Speechlib_tlb::ISpeechRecoResult* Result/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextPropertyNumberChange)(System::TObject * Sender, 
                                                                               long StreamNumber/*[in]*/, 
                                                                               VARIANT StreamPosition/*[in]*/, 
                                                                               BSTR PropertyName/*[in]*/, 
                                                                               long NewNumberValue/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextPropertyStringChange)(System::TObject * Sender, 
                                                                               long StreamNumber/*[in]*/, 
                                                                               VARIANT StreamPosition/*[in]*/, 
                                                                               BSTR PropertyName/*[in]*/, 
                                                                               BSTR NewStringValue/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextFalseRecognition)(System::TObject * Sender, 
                                                                           long StreamNumber/*[in]*/, 
                                                                           VARIANT StreamPosition/*[in]*/, 
                                                                           Speechlib_tlb::ISpeechRecoResult* Result/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextInterference)(System::TObject * Sender, 
                                                                       long StreamNumber/*[in]*/, 
                                                                       VARIANT StreamPosition/*[in]*/, 
                                                                       Speechlib_tlb::SpeechInterference Interference/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextRequestUI)(System::TObject * Sender, 
                                                                    long StreamNumber/*[in]*/, 
                                                                    VARIANT StreamPosition/*[in]*/, 
                                                                    BSTR UIType/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextRecognizerStateChange)(System::TObject * Sender, 
                                                                                long StreamNumber/*[in]*/, 
                                                                                VARIANT StreamPosition/*[in]*/, 
                                                                                Speechlib_tlb::SpeechRecognizerState NewState/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextAdaptation)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextRecognitionForOtherContext)(System::TObject * Sender, 
                                                                                     long StreamNumber/*[in]*/, 
                                                                                     VARIANT StreamPosition/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextAudioLevel)(System::TObject * Sender, 
                                                                     long StreamNumber/*[in]*/, 
                                                                     VARIANT StreamPosition/*[in]*/, 
                                                                     long AudioLevel/*[in]*/);
typedef void __fastcall (__closure * TSpInProcRecoContextEnginePrivate)(System::TObject * Sender, 
                                                                        long StreamNumber/*[in]*/, 
                                                                        VARIANT StreamPosition/*[in]*/, 
                                                                        VARIANT EngineData/*[in]*/);

class PACKAGE TSpInProcRecoContext : public Vcl::Oleserver::TOleServer
{
  ISpeechRecoContextPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpInProcRecoContext(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechRecoContextPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechRecoContextPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Vcl::Oleserver::TVariantArray& params);

  Speechlib_tlb::ISpeechRecognizerPtr __fastcall get_Recognizer(void);
  Speechlib_tlb::SpeechInterference __fastcall get_AudioInputInterferenceStatus(void);
  BSTR            __fastcall get_RequestedUIType(void);
  void            __fastcall _set_Voice(Speechlib_tlb::ISpeechVoice* Voice/*[in]*/);
  Speechlib_tlb::ISpeechVoicePtr __fastcall get_Voice(void);
  void            __fastcall set_AllowVoiceFormatMatchingOnNextSet(VARIANT_BOOL pAllow/*[in]*/);
  VARIANT_BOOL    __fastcall get_AllowVoiceFormatMatchingOnNextSet(void);
  void            __fastcall set_VoicePurgeEvent(Speechlib_tlb::SpeechRecoEvents EventInterest/*[in]*/);
  Speechlib_tlb::SpeechRecoEvents __fastcall get_VoicePurgeEvent(void);
  void            __fastcall set_EventInterests(Speechlib_tlb::SpeechRecoEvents EventInterest/*[in]*/);
  Speechlib_tlb::SpeechRecoEvents __fastcall get_EventInterests(void);
  void            __fastcall set_CmdMaxAlternates(long MaxAlternates/*[in]*/);
  long            __fastcall get_CmdMaxAlternates(void);
  void            __fastcall set_State(Speechlib_tlb::SpeechRecoContextState State/*[in]*/);
  Speechlib_tlb::SpeechRecoContextState __fastcall get_State(void);
  void            __fastcall set_RetainedAudio(Speechlib_tlb::SpeechRetainedAudioOptions Option/*[in]*/);
  Speechlib_tlb::SpeechRetainedAudioOptions __fastcall get_RetainedAudio(void);
  void            __fastcall _set_RetainedAudioFormat(Speechlib_tlb::ISpeechAudioFormat* Format/*[in]*/);
  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_RetainedAudioFormat(void);
  void            __fastcall Pause(void);
  void            __fastcall Resume(void);
  Speechlib_tlb::ISpeechRecoGrammar* __fastcall CreateGrammar(VARIANT GrammarId/*[in,def,opt]*/= TNoParam());
  Speechlib_tlb::ISpeechRecoResult* __fastcall CreateResultFromMemory(VARIANT* ResultBlock/*[in]*/);
  void            __fastcall Bookmark(Speechlib_tlb::SpeechBookmarkOptions Options/*[in]*/, 
                                      VARIANT StreamPos/*[in]*/, VARIANT BookmarkId/*[in]*/);
  void            __fastcall SetAdaptationData(BSTR AdaptationString/*[in]*/);
  __property Speechlib_tlb::ISpeechRecognizerPtr Recognizer={ read=get_Recognizer };
  __property Speechlib_tlb::SpeechInterference AudioInputInterferenceStatus={ read=get_AudioInputInterferenceStatus };
  __property BSTR RequestedUIType={ read=get_RequestedUIType };
  __property Speechlib_tlb::ISpeechVoice* Voice={ read=get_Voice };
  __property VARIANT_BOOL AllowVoiceFormatMatchingOnNextSet={ read=get_AllowVoiceFormatMatchingOnNextSet, write=set_AllowVoiceFormatMatchingOnNextSet };
  __property Speechlib_tlb::ISpeechAudioFormat* RetainedAudioFormat={ read=get_RetainedAudioFormat };
  __property Speechlib_tlb::SpeechRecoEvents VoicePurgeEvent={ read=get_VoicePurgeEvent, write=set_VoicePurgeEvent, stored=false };
  __property Speechlib_tlb::SpeechRecoEvents EventInterests={ read=get_EventInterests, write=set_EventInterests, stored=false };
  __property long CmdMaxAlternates={ read=get_CmdMaxAlternates, write=set_CmdMaxAlternates, stored=false };
  __property Speechlib_tlb::SpeechRecoContextState State={ read=get_State, write=set_State, stored=false };
  __property Speechlib_tlb::SpeechRetainedAudioOptions RetainedAudio={ read=get_RetainedAudio, write=set_RetainedAudio, stored=false };
private:
  TSpInProcRecoContextStartStream FOnStartStream;
  TSpInProcRecoContextEndStream  FOnEndStream;
  TSpInProcRecoContextBookmark   FOnBookmark;
  TSpInProcRecoContextSoundStart FOnSoundStart;
  TSpInProcRecoContextSoundEnd   FOnSoundEnd;
  TSpInProcRecoContextPhraseStart FOnPhraseStart;
  TSpInProcRecoContextRecognition FOnRecognition;
  TSpInProcRecoContextHypothesis FOnHypothesis;
  TSpInProcRecoContextPropertyNumberChange FOnPropertyNumberChange;
  TSpInProcRecoContextPropertyStringChange FOnPropertyStringChange;
  TSpInProcRecoContextFalseRecognition FOnFalseRecognition;
  TSpInProcRecoContextInterference FOnInterference;
  TSpInProcRecoContextRequestUI  FOnRequestUI;
  TSpInProcRecoContextRecognizerStateChange FOnRecognizerStateChange;
  TSpInProcRecoContextAdaptation FOnAdaptation;
  TSpInProcRecoContextRecognitionForOtherContext FOnRecognitionForOtherContext;
  TSpInProcRecoContextAudioLevel FOnAudioLevel;
  TSpInProcRecoContextEnginePrivate FOnEnginePrivate;
__published:
  __property TSpInProcRecoContextStartStream OnStartStream={ read=FOnStartStream, write=FOnStartStream };
  __property TSpInProcRecoContextEndStream OnEndStream={ read=FOnEndStream, write=FOnEndStream };
  __property TSpInProcRecoContextBookmark OnBookmark={ read=FOnBookmark, write=FOnBookmark };
  __property TSpInProcRecoContextSoundStart OnSoundStart={ read=FOnSoundStart, write=FOnSoundStart };
  __property TSpInProcRecoContextSoundEnd OnSoundEnd={ read=FOnSoundEnd, write=FOnSoundEnd };
  __property TSpInProcRecoContextPhraseStart OnPhraseStart={ read=FOnPhraseStart, write=FOnPhraseStart };
  __property TSpInProcRecoContextRecognition OnRecognition={ read=FOnRecognition, write=FOnRecognition };
  __property TSpInProcRecoContextHypothesis OnHypothesis={ read=FOnHypothesis, write=FOnHypothesis };
  __property TSpInProcRecoContextPropertyNumberChange OnPropertyNumberChange={ read=FOnPropertyNumberChange, write=FOnPropertyNumberChange };
  __property TSpInProcRecoContextPropertyStringChange OnPropertyStringChange={ read=FOnPropertyStringChange, write=FOnPropertyStringChange };
  __property TSpInProcRecoContextFalseRecognition OnFalseRecognition={ read=FOnFalseRecognition, write=FOnFalseRecognition };
  __property TSpInProcRecoContextInterference OnInterference={ read=FOnInterference, write=FOnInterference };
  __property TSpInProcRecoContextRequestUI OnRequestUI={ read=FOnRequestUI, write=FOnRequestUI };
  __property TSpInProcRecoContextRecognizerStateChange OnRecognizerStateChange={ read=FOnRecognizerStateChange, write=FOnRecognizerStateChange };
  __property TSpInProcRecoContextAdaptation OnAdaptation={ read=FOnAdaptation, write=FOnAdaptation };
  __property TSpInProcRecoContextRecognitionForOtherContext OnRecognitionForOtherContext={ read=FOnRecognitionForOtherContext, write=FOnRecognitionForOtherContext };
  __property TSpInProcRecoContextAudioLevel OnAudioLevel={ read=FOnAudioLevel, write=FOnAudioLevel };
  __property TSpInProcRecoContextEnginePrivate OnEnginePrivate={ read=FOnEnginePrivate, write=FOnEnginePrivate };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpCustomStream
// Help String      : SpCustomStream Class
// Default Interface: ISpeechCustomStream
// Def. Intf. Object: ISpeechCustomStreamPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpCustomStream : public Vcl::Oleserver::TOleServer
{
  ISpeechCustomStreamPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpCustomStream(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechCustomStreamPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechCustomStreamPtr intf);


  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_Format(void);
  void            __fastcall _set_Format(Speechlib_tlb::ISpeechAudioFormat* AudioFormat/*[in]*/);
  LPUNKNOWN       __fastcall get_BaseStream(void);
  void            __fastcall _set_BaseStream(LPUNKNOWN ppUnkStream/*[in]*/);
  long            __fastcall Read(VARIANT* Buffer/*[out]*/, long NumberOfBytes/*[in]*/);
  long            __fastcall Write(VARIANT Buffer/*[in]*/);
  VARIANT         __fastcall Seek(VARIANT Position/*[in]*/, 
                                  Speechlib_tlb::SpeechStreamSeekPositionType Origin/*[in,def,opt]*/);
  __property Speechlib_tlb::ISpeechAudioFormatPtr Format={ read=get_Format };
  __property LPUNKNOWN BaseStream={ read=get_BaseStream, write=_set_BaseStream };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpFileStream
// Help String      : SpFileStream Class
// Default Interface: ISpeechFileStream
// Def. Intf. Object: ISpeechFileStreamPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpFileStream : public Vcl::Oleserver::TOleServer
{
  ISpeechFileStreamPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpFileStream(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechFileStreamPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechFileStreamPtr intf);


  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_Format(void);
  void            __fastcall _set_Format(Speechlib_tlb::ISpeechAudioFormat* AudioFormat/*[in]*/);
  long            __fastcall Read(VARIANT* Buffer/*[out]*/, long NumberOfBytes/*[in]*/);
  long            __fastcall Write(VARIANT Buffer/*[in]*/);
  VARIANT         __fastcall Seek(VARIANT Position/*[in]*/, 
                                  Speechlib_tlb::SpeechStreamSeekPositionType Origin/*[in,def,opt]*/);
  void            __fastcall Open(BSTR FileName/*[in]*/, 
                                  Speechlib_tlb::SpeechStreamFileMode FileMode/*[in,def,opt]*/, 
                                  VARIANT_BOOL DoEvents/*[in,def,opt]*/);
  void            __fastcall Close(void);
  __property Speechlib_tlb::ISpeechAudioFormatPtr Format={ read=get_Format };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSpMemoryStream
// Help String      : SpMemoryStream Class
// Default Interface: ISpeechMemoryStream
// Def. Intf. Object: ISpeechMemoryStreamPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TSpMemoryStream : public Vcl::Oleserver::TOleServer
{
  ISpeechMemoryStreamPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSpMemoryStream(System::Classes::TComponent* owner) : Vcl::Oleserver::TOleServer(owner)
  {}

  ISpeechMemoryStreamPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISpeechMemoryStreamPtr intf);


  Speechlib_tlb::ISpeechAudioFormatPtr __fastcall get_Format(void);
  void            __fastcall _set_Format(Speechlib_tlb::ISpeechAudioFormat* AudioFormat/*[in]*/);
  long            __fastcall Read(VARIANT* Buffer/*[out]*/, long NumberOfBytes/*[in]*/);
  long            __fastcall Write(VARIANT Buffer/*[in]*/);
  VARIANT         __fastcall Seek(VARIANT Position/*[in]*/, 
                                  Speechlib_tlb::SpeechStreamSeekPositionType Origin/*[in,def,opt]*/);
  void            __fastcall SetData(VARIANT Data/*[in]*/);
  VARIANT         __fastcall GetData(void);
  __property Speechlib_tlb::ISpeechAudioFormatPtr Format={ read=get_Format };
};

};     // namespace Speechlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Speechlib_tlb;
#endif

#pragma option pop

#endif // SpeechLib_OCXH
